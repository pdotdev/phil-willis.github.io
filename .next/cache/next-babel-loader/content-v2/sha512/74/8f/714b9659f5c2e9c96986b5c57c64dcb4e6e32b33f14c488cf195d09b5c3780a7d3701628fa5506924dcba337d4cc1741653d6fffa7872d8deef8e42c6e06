{"ast":null,"code":"import _regeneratorRuntime from \"/Users/philopian/Development/PROJECTS/BLOG/dev-blog/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/philopian/Development/PROJECTS/BLOG/dev-blog/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport renderToString from \"next-mdx-remote/render-to-string\";\nimport hydrate from \"next-mdx-remote/hydrate\";\nimport { Hello, Test } from \"./components\";\nvar components = {\n  Test: Test,\n  Hello: Hello\n};\n/**\n * serialize mdx to string\n */\n\nexport function mdxToString(_x) {\n  return _mdxToString.apply(this, arguments);\n}\n/**\n * render string back to react components\n */\n\nfunction _mdxToString() {\n  _mdxToString = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(mdx) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return renderToString(mdx, {\n              components: components\n            });\n\n          case 2:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _mdxToString.apply(this, arguments);\n}\n\nexport function stringToMdx(string) {\n  return hydrate(string, {\n    components: components\n  });\n}","map":null,"metadata":{},"sourceType":"module"}